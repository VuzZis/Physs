import com.google.gson.Gson
import com.google.gson.GsonBuilder

import java.nio.charset.StandardCharsets

buildscript {
    repositories {
        mavenLocal()
    }

    dependencies {
        classpath 'com.google.code.gson:gson:2.9.1'
    }
}

plugins {
    id 'java'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
tasks.withType(Test).configureEach {
    jvmArgs '-Dfile.encoding=UTF-8'
}

group = 'com.skoow.physs'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.google.code.gson:gson:2.9.1'
}

test {
    useJUnitPlatform()
}


List<String> readFile(File file)
        throws IOException {

    BufferedReader reader = new BufferedReader(new FileReader(file));
    return reader.readLines();
}

static InputStreamReader createInput(File f) throws FileNotFoundException
{ return new InputStreamReader(new FileInputStream(f),StandardCharsets.UTF_8); }

static OutputStreamWriter createOutput(File f) throws FileNotFoundException
{ return new OutputStreamWriter(new FileOutputStream(f),StandardCharsets.UTF_8); }

task updateResources {
    doLast {
        File resourcesFolder = new File("src/main/resources"); resourcesFolder.mkdir()
        File langFolder = new File(resourcesFolder, "lang"); langFolder.mkdir()
        File mainLangJson = new File(langFolder, "en_us.json"); mainLangJson.createNewFile()
        Gson gson = new GsonBuilder().setPrettyPrinting().disableHtmlEscaping().create()
        TreeMap<String,String> EN_US = gson.fromJson(createInput(mainLangJson), TreeMap<String,String>.class)
        if(EN_US == null) {
            println "Skipping langFile because of incorrect structure " + mainLangJson.getName()
            return
        }

        File[] otherLangs = langFolder.listFiles( (FileFilter) (f) -> {return f != mainLangJson && f.isFile() && f.getName().endsWith(".json")})
        println "\u001B[32m- Comparing langs...\u001B[0m"
        for (final File otherLang in otherLangs) {
            InputStreamReader reader = createInput(otherLang)
            TreeMap<String,String> LANG = gson.fromJson(reader, TreeMap<String,String>.class)
            reader.close();
            if(LANG == null) {
                println "Skipping langFile because of incorrect structure " + otherLang.getName()
                continue
            }

            EN_US.forEach(LANG::putIfAbsent)
            OutputStreamWriter writer = createOutput(otherLang)
            gson.toJson(LANG, TreeMap<String, String>.class, writer)
            writer.close()
            println "\u001B[32m- Compared lang file\u001B[0m " + "\u001B[36m" + otherLang.getName() + "\u001B[0m"
        }
    }
}